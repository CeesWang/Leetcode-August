class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<int[]> queue = new LinkedList<>();
        int freshOranges = 0, minutes = -1; 
        for (int i = 0; i < grid.length; ++i) {
            for (int j = 0; j < grid[0].length; ++j) {
                if (grid[i][j] == 2) {
                    queue.add(new int []{i,j});
                } else if (grid[i][j] == 1) {
                    freshOranges++;
                }
            }
        }
        if (freshOranges == 0) {
            return 0;
        }
        int [][] directions = new int[][] {{0,-1},{0,1},{1,0},{-1,0}};
        while (queue.size() != 0) {
            int orangesInQueue = queue.size();
            for (int i = 0; i < orangesInQueue; ++i) {
                int [] position = queue.poll();
                for (int [] dir : directions) {
                    int row = position[0] + dir[0];
                    int col = position[1] + dir[1];
                    if (row >= 0 && row < grid.length && col >= 0 && col < grid[0].length) {
                        if (grid[row][col] == 1) {
                            grid[row][col] = 2;
                            queue.add(new int[]{row , col});
                            freshOranges--;
                            
                        }
                    }
                }
            }
            minutes++;
        }
        return freshOranges > 0 ? -1 : minutes;
    }
}
